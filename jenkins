pipeline {
    agent any

    environment {
        DOCKERHUB_USER = "root"        // changer si tu veux pousser sur DockerHub
        APP_BACKEND = "backend"
        APP_FRONTEND = "frontend"
    }

    stages {

        stage('Checkout Project with Submodules') {
            steps {
                echo "Cloning project and submodules..."
                deleteDir()
                git branch: 'main', url: 'https://github.com/AyaIssa1/MaintenanceTP2.git'
                sh '''
                    git submodule update --init --recursive
                    echo " ^|^e Submodules initialized"
                    ls -R
                '''
            }
        }

        stage('Build & Package (Maven)') {
            steps {
                echo "Building and packaging Maven backend..."
                dir('backend') {
                    sh 'mvn clean package -DskipTests'
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'backend/target/*.jar', fingerprint: true
                    junit 'backend/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Docker Build') {
            steps {
                echo "Building Docker images for backend and frontend..."
                sh '''
                    cd backend
                    docker build -t ${APP_BACKEND}:${BUILD_NUMBER} .
                    cd ../frontend
                    docker build -t ${APP_FRONTEND}:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Test (Unit + Integration)') {
            steps {
                echo "Running unit and integration tests..."
                dir('backend') {
                    sh 'mvn clean test'
                }
            }
            post {
                always {
                    junit 'backend/target/surefire-reports/*.xml'
                }
            }
        }

        stage('JaCoCo Report') {
            steps {
                echo "Generating JaCoCo coverage report..."
                dir('backend') {
                    sh 'mvn jacoco:report'
                }
            }
            post {
                success {
                    publishHTML(target: [
                        reportDir: 'backend/target/site/jacoco',
                        reportFiles: 'index.html',
                        reportName: 'JaCoCo Coverage'
                    ])
                }
            }
        }

        stage('Success Notification') {
            when {
                expression { currentBuild.currentResult == 'SUCCESS' }
            }
            steps {
                echo "Pipeline succeeded! Sending email notification..."
                emailext (
                    to: 'ikramsaidi47@gmail.com',
                    subject: " ^|^e Jenkins Pipeline SUCCESS #${BUILD_NUMBER}",
                    body: """<h2>Pipeline completed successfully</h2>
                    <p>Project: MaintenanceTP2</p>
                    <p>Build: #${BUILD_NUMBER}</p>
                    <p>Check artifacts and logs in Jenkins.</p>""",
                    mimeType: 'text/html'
                )
            }
        }
    }

    post {
        failure {
            emailext (
                to: 'ikramsaidi47@gmail.com',
                subject: " ^}^l Jenkins Pipeline FAILED #${BUILD_NUMBER}",
                body: """<h2>Pipeline failed</h2>
                <p>Project: MaintenanceTP2</p>
                <p>Build: #${BUILD_NUMBER}</p>
                <p>Check Jenkins logs for details.</p>""",
                mimeType: 'text/html'
            )
        }
    }
}
